version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tradebot-postgres
    network_mode: "host"
    environment:
      POSTGRES_DB: tradebot_db
      POSTGRES_USER: tradebot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tradebot_secure_pass_123}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U tradebot_user -d tradebot_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tradebot-redis
    network_mode: "host"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: tradebot-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://tradebot_user:${POSTGRES_PASSWORD:-tradebot_secure_pass_123}@postgres:5432/tradebot_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-super_secret_key_change_in_production_12345}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - BINANCE_API_KEY=${BINANCE_API_KEY:-}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY:-}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradebot-network
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:8000
    container_name: tradebot-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - tradebot-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tradebot-network:
    driver: bridge
