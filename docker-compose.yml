services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tradebot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tradebot_db
      POSTGRES_USER: tradebot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tradebot_secure_pass_123}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - tradebot-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U tradebot_user -d tradebot_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tradebot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradebot-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: tradebot-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://tradebot_user:${POSTGRES_PASSWORD:-tradebot_secure_pass_123}@postgres:5432/tradebot_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-super_secret_key_change_in_production_12345}
      - FERNET_KEY=${FERNET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradebot-network
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
      - ./alembic:/app/alembic
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        echo 'ðŸ”„ Database migration baÅŸlatÄ±lÄ±yor...' &&
        alembic upgrade head &&
        echo 'âœ… Database migration tamamlandÄ±!' &&
        echo 'ðŸš€ Backend server baÅŸlatÄ±lÄ±yor...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
    container_name: tradebot-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tradebot-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: tradebot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - tradebot-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  tradebot-network:
    driver: bridge
