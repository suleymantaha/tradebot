"""Add password reset fields to user table

Revision ID: fd407afd6a7f
Revises: f0307c41750e
Create Date: 2025-05-25 15:00:18.305311

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fd407afd6a7f'
down_revision: Union[str, None] = 'f0307c41750e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_backtests_id'), table_name='backtests')
    op.drop_index(op.f('ix_backtests_user_id'), table_name='backtests')
    op.drop_table('backtests')
    op.add_column('users', sa.Column('reset_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('reset_token_expires', sa.DateTime(timezone=True), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'reset_token_expires')
    op.drop_column('users', 'reset_token')
    op.create_table('backtests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('interval', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('initial_capital', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('final_capital', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_return', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_trades', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('winning_trades', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('losing_trades', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('win_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_fees', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('avg_profit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('daily_results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('monthly_results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('test_mode', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('backtests_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('backtests_pkey'))
    )
    op.create_index(op.f('ix_backtests_user_id'), 'backtests', ['user_id'], unique=False)
    op.create_index(op.f('ix_backtests_id'), 'backtests', ['id'], unique=False)
    # ### end Alembic commands ###
