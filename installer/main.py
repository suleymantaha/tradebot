#!/usr/bin/env python3
"""
TradeBot GUI Installer
======================
Grafik aray√ºzl√º kurulum programƒ±
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import subprocess
import os
import sys
import json
from pathlib import Path

class TradeBotInstaller:
    def __init__(self, root):
        self.root = root
        self.root.title("TradeBot Installer v2.0")
        self.root.geometry("800x600")
        self.root.resizable(False, False)

        # Installer state
        self.install_path = os.getcwd()
        self.config = {
            "postgres_password": "",
            "pgadmin_email": "admin@tradebot.local",
            "pgadmin_password": "",
            "frontend_port": "3000",
            "backend_port": "8000",
            "postgres_port": "5432",
            "pgadmin_port": "5050",
            "environment": "production"
        }

        # Create notebook for pages
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)

        # Create pages
        self.create_welcome_page()
        self.create_system_check_page()
        self.create_config_page()
        self.create_install_page()
        self.create_finish_page()

        # Navigation buttons frame
        self.nav_frame = ttk.Frame(root)
        self.nav_frame.pack(fill="x", padx=10, pady=5)

        self.prev_btn = ttk.Button(self.nav_frame, text="< Geri", command=self.prev_page, state="disabled")
        self.prev_btn.pack(side="left")

        self.next_btn = ttk.Button(self.nav_frame, text="ƒ∞leri >", command=self.next_page)
        self.next_btn.pack(side="right")

        self.current_page = 0
        self.update_navigation()

    def create_welcome_page(self):
        """Ho≈ü geldin sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Ho≈ü Geldiniz")

        # Logo ve ba≈ülƒ±k
        title_frame = ttk.Frame(page)
        title_frame.pack(pady=50)

        title_label = ttk.Label(title_frame, text="üöÄ TradeBot Installer",
                               font=("Arial", 24, "bold"))
        title_label.pack()

        subtitle_label = ttk.Label(title_frame, text="Profesyonel Kripto Trading Bot",
                                  font=("Arial", 14))
        subtitle_label.pack(pady=10)

        # A√ßƒ±klama
        desc_frame = ttk.Frame(page)
        desc_frame.pack(pady=20, padx=50, fill="x")

        description = """
TradeBot'a ho≈ü geldiniz! Bu kurulum sihirbazƒ± size yardƒ±mcƒ± olacak:

‚úÖ Sistem gereksinimlerini kontrol et
‚úÖ Konfig√ºrasyon ayarlarƒ±nƒ± belirle
‚úÖ Docker containerlarƒ± otomatik kur
‚úÖ G√ºvenli ≈üifreler olu≈ütur
‚úÖ T√ºm servisleri ba≈ülat

Kurulum yakla≈üƒ±k 5-10 dakika s√ºrer.
        """

        desc_label = ttk.Label(desc_frame, text=description, justify="left",
                              font=("Arial", 11))
        desc_label.pack()

        # Uyarƒ±
        warning_frame = ttk.Frame(page)
        warning_frame.pack(pady=20, padx=50, fill="x")

        warning_text = "‚ö†Ô∏è  Kurulum i√ßin Docker ve Docker Compose gereklidir"
        warning_label = ttk.Label(warning_frame, text=warning_text,
                                 foreground="orange", font=("Arial", 10, "bold"))
        warning_label.pack()

    def create_system_check_page(self):
        """Sistem kontrol sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Sistem Kontrol√º")

        title_label = ttk.Label(page, text="Sistem Gereksinimleri",
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Sistem kontrol frame
        self.check_frame = ttk.LabelFrame(page, text="Kontrol Sonu√ßlarƒ±", padding=20)
        self.check_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Kontrol butonu
        check_btn = ttk.Button(page, text="Sistem Kontrol√º Yap",
                              command=self.check_system)
        check_btn.pack(pady=10)

        self.system_checks = []

    def create_config_page(self):
        """Konfig√ºrasyon sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Konfig√ºrasyon")

        title_label = ttk.Label(page, text="Kurulum Ayarlarƒ±",
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Main config frame
        config_frame = ttk.Frame(page)
        config_frame.pack(fill="both", expand=True, padx=20)

        # Sol s√ºtun - Dizin ve ≈üifreler
        left_frame = ttk.LabelFrame(config_frame, text="Temel Ayarlar", padding=15)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # Kurulum dizini
        ttk.Label(left_frame, text="Kurulum Dizini:").pack(anchor="w")
        dir_frame = ttk.Frame(left_frame)
        dir_frame.pack(fill="x", pady=(0, 15))

        self.install_path_var = tk.StringVar(value=self.install_path)
        ttk.Entry(dir_frame, textvariable=self.install_path_var, state="readonly").pack(side="left", fill="x", expand=True)
        ttk.Button(dir_frame, text="G√∂zat", command=self.browse_directory).pack(side="right", padx=(5, 0))

        # PostgreSQL ≈üifresi
        ttk.Label(left_frame, text="PostgreSQL ≈ûifresi:").pack(anchor="w")
        self.postgres_pass_var = tk.StringVar()
        postgres_frame = ttk.Frame(left_frame)
        postgres_frame.pack(fill="x", pady=(0, 15))

        ttk.Entry(postgres_frame, textvariable=self.postgres_pass_var, show="*").pack(side="left", fill="x", expand=True)
        ttk.Button(postgres_frame, text="Olu≈ütur", command=self.generate_postgres_password).pack(side="right", padx=(5, 0))

        # pgAdmin ayarlarƒ±
        ttk.Label(left_frame, text="pgAdmin Email:").pack(anchor="w")
        self.pgadmin_email_var = tk.StringVar(value=self.config["pgadmin_email"])
        ttk.Entry(left_frame, textvariable=self.pgadmin_email_var).pack(fill="x", pady=(0, 10))

        ttk.Label(left_frame, text="pgAdmin ≈ûifresi:").pack(anchor="w")
        self.pgadmin_pass_var = tk.StringVar()
        pgadmin_frame = ttk.Frame(left_frame)
        pgadmin_frame.pack(fill="x", pady=(0, 15))

        ttk.Entry(pgadmin_frame, textvariable=self.pgadmin_pass_var, show="*").pack(side="left", fill="x", expand=True)
        ttk.Button(pgadmin_frame, text="Olu≈ütur", command=self.generate_pgadmin_password).pack(side="right", padx=(5, 0))

        # Saƒü s√ºtun - Port ayarlarƒ±
        right_frame = ttk.LabelFrame(config_frame, text="Port Ayarlarƒ±", padding=15)
        right_frame.pack(side="right", fill="both", expand=True, padx=(10, 0))

        ports = [
            ("Frontend Port:", "frontend_port"),
            ("Backend Port:", "backend_port"),
            ("PostgreSQL Port:", "postgres_port"),
            ("pgAdmin Port:", "pgadmin_port")
        ]

        self.port_vars = {}
        for label_text, key in ports:
            ttk.Label(right_frame, text=label_text).pack(anchor="w")
            var = tk.StringVar(value=self.config[key])
            self.port_vars[key] = var
            ttk.Entry(right_frame, textvariable=var, width=10).pack(anchor="w", pady=(0, 10))

        # Environment se√ßimi
        ttk.Label(right_frame, text="Ortam:").pack(anchor="w", pady=(20, 0))
        self.env_var = tk.StringVar(value="production")
        env_frame = ttk.Frame(right_frame)
        env_frame.pack(anchor="w")
        ttk.Radiobutton(env_frame, text="Production", variable=self.env_var, value="production").pack(anchor="w")
        ttk.Radiobutton(env_frame, text="Development", variable=self.env_var, value="development").pack(anchor="w")

    def create_install_page(self):
        """Kurulum sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Kurulum")

        title_label = ttk.Label(page, text="Kurulum ƒ∞lerliyor...",
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Progress bar
        self.progress = ttk.Progressbar(page, mode="indeterminate")
        self.progress.pack(fill="x", padx=50, pady=10)

        # Status label
        self.status_label = ttk.Label(page, text="Kurulum ba≈ülamadƒ±",
                                     font=("Arial", 11))
        self.status_label.pack(pady=10)

        # Log area
        log_frame = ttk.LabelFrame(page, text="Kurulum Detaylarƒ±", padding=10)
        log_frame.pack(fill="both", expand=True, padx=20, pady=20)

        self.log_text = tk.Text(log_frame, height=15, wrap="word")
        scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)

        self.log_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Install button
        self.install_btn = ttk.Button(page, text="Kurulumu Ba≈ülat",
                                     command=self.start_installation)
        self.install_btn.pack(pady=10)

    def create_finish_page(self):
        """Tamamlama sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Tamamlandƒ±")

        title_label = ttk.Label(page, text="üéâ Kurulum Tamamlandƒ±!",
                               font=("Arial", 18, "bold"), foreground="green")
        title_label.pack(pady=30)

        # Success info frame
        self.success_frame = ttk.LabelFrame(page, text="Eri≈üim Bilgileri", padding=20)
        self.success_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Buttons frame
        button_frame = ttk.Frame(page)
        button_frame.pack(pady=20)

        ttk.Button(button_frame, text="Frontend A√ß",
                  command=self.open_frontend).pack(side="left", padx=10)
        ttk.Button(button_frame, text="API Docs A√ß",
                  command=self.open_api_docs).pack(side="left", padx=10)
        ttk.Button(button_frame, text="pgAdmin A√ß",
                  command=self.open_pgadmin).pack(side="left", padx=10)

    def update_navigation(self):
        """Navigasyon butonlarƒ±nƒ± g√ºncelle"""
        self.prev_btn.config(state="normal" if self.current_page > 0 else "disabled")

        if self.current_page == len(self.notebook.tabs()) - 1:
            self.next_btn.config(text="Kapat", command=self.close_app)
        else:
            self.next_btn.config(text="ƒ∞leri >", command=self.next_page)

        self.notebook.select(self.current_page)

    def prev_page(self):
        """√ñnceki sayfa"""
        if self.current_page > 0:
            self.current_page -= 1
            self.update_navigation()

    def next_page(self):
        """Sonraki sayfa"""
        if self.current_page < len(self.notebook.tabs()) - 1:
            # Sayfa ge√ßi≈ü validasyonlarƒ±
            if self.current_page == 1:  # System check
                if not self.validate_system():
                    return
            elif self.current_page == 2:  # Config
                if not self.validate_config():
                    return

            self.current_page += 1
            self.update_navigation()

    def browse_directory(self):
        """Kurulum dizini se√ß"""
        directory = filedialog.askdirectory(initialdir=self.install_path)
        if directory:
            self.install_path = directory
            self.install_path_var.set(directory)

    def generate_postgres_password(self):
        """PostgreSQL ≈üifresi olu≈ütur"""
        import secrets
        import string

        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(16))
        self.postgres_pass_var.set(password)

    def generate_pgadmin_password(self):
        """pgAdmin ≈üifresi olu≈ütur"""
        import secrets
        import string

        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(12))
        self.pgadmin_pass_var.set(password)

    def check_system(self):
        """Sistem gereksinimlerini kontrol et"""
        # Clear previous checks
        for widget in self.check_frame.winfo_children():
            if isinstance(widget, ttk.Label) and hasattr(widget, 'check_result'):
                widget.destroy()

        checks = [
            ("Docker", "docker --version"),
            ("Docker Compose", "docker-compose --version"),
            ("curl", "curl --version"),
            ("git", "git --version")
        ]

        for name, command in checks:
            try:
                result = subprocess.run(command.split(), capture_output=True, text=True, timeout=5)
                status = "‚úÖ Kurulu" if result.returncode == 0 else "‚ùå Eksik"
                color = "green" if result.returncode == 0 else "red"
            except Exception:
                status = "‚ùå Eksik"
                color = "red"

            label = ttk.Label(self.check_frame, text=f"{name}: {status}", foreground=color)
            label.check_result = status
            label.pack(anchor="w", pady=2)

    def validate_system(self):
        """Sistem kontrol√º validasyonu"""
        checks = [widget for widget in self.check_frame.winfo_children()
                 if hasattr(widget, 'check_result')]

        if not checks:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen √∂nce sistem kontrol√º yapƒ±n!")
            return False

        failed_checks = [widget for widget in checks if "‚ùå" in widget.check_result]
        if failed_checks:
            messagebox.showerror("Hata", "Bazƒ± sistem gereksinimleri kar≈üƒ±lanmƒ±yor!")
            return False

        return True

    def validate_config(self):
        """Konfig√ºrasyon validasyonu"""
        if not self.postgres_pass_var.get():
            messagebox.showwarning("Uyarƒ±", "PostgreSQL ≈üifresi gerekli!")
            return False

        if not self.pgadmin_pass_var.get():
            messagebox.showwarning("Uyarƒ±", "pgAdmin ≈üifresi gerekli!")
            return False

        return True

    def start_installation(self):
        """Kurulumu ba≈ülat"""
        self.install_btn.config(state="disabled")
        self.progress.start()

        # Background thread'de kurulum yap
        thread = threading.Thread(target=self.run_installation)
        thread.daemon = True
        thread.start()

    def run_installation(self):
        """Kurulum i≈ülemini √ßalƒ±≈ütƒ±r"""
        try:
            self.log("Kurulum ba≈ülatƒ±lƒ±yor...")

            # Change to install directory
            os.chdir(self.install_path)

            # Create .env file
            self.log("Environment dosyasƒ± olu≈üturuluyor...")
            self.create_env_file()

            # Run installation steps
            steps = [
                ("Docker servis kontrol√º", "sudo systemctl start docker || true"),
                ("Eski containerlarƒ± temizle", "docker-compose down --remove-orphans || true"),
                ("Docker images build et", "docker-compose build --no-cache"),
                ("Servisleri ba≈ülat", "docker-compose up -d"),
                ("Servislerin hazƒ±r olmasƒ±nƒ± bekle", "sleep 30")
            ]

            for step_name, command in steps:
                self.log(f"{step_name}...")
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                if result.stdout:
                    self.log(result.stdout)
                if result.stderr:
                    self.log(result.stderr)

            self.log("‚úÖ Kurulum ba≈üarƒ±yla tamamlandƒ±!")
            self.show_success_info()

        except Exception as e:
            self.log(f"‚ùå Hata: {str(e)}")
        finally:
            self.progress.stop()
            self.install_btn.config(state="normal")

    def create_env_file(self):
        """Environment dosyasƒ± olu≈ütur"""
        env_content = f"""# TradeBot Environment Configuration
# Otomatik olu≈üturuldu - GUI Installer

POSTGRES_PASSWORD={self.postgres_pass_var.get()}
PGADMIN_DEFAULT_EMAIL={self.pgadmin_email_var.get()}
PGADMIN_DEFAULT_PASSWORD={self.pgadmin_pass_var.get()}

SECRET_KEY={self.generate_secret_key()}
FERNET_KEY={self.generate_fernet_key()}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

ENVIRONMENT={self.env_var.get()}
LOG_LEVEL=INFO

VITE_API_URL=http://localhost:{self.port_vars['backend_port'].get()}

LOG_FILE=/app/logs/tradebot.log
REDIS_URL=redis://redis:6379

DATABASE_URL=postgresql+asyncpg://tradebot_user:{self.postgres_pass_var.get()}@postgres:5432/tradebot_db
"""

        with open('.env', 'w') as f:
            f.write(env_content)

    def generate_secret_key(self):
        """Secret key olu≈ütur"""
        import secrets
        return secrets.token_hex(32)

    def generate_fernet_key(self):
        """Fernet key olu≈ütur"""
        try:
            from cryptography.fernet import Fernet
            return Fernet.generate_key().decode()
        except ImportError:
            import base64
            import os
            return base64.urlsafe_b64encode(os.urandom(32)).decode()

    def log(self, message):
        """Log mesajƒ± ekle"""
        def _log():
            self.log_text.insert(tk.END, message + "\n")
            self.log_text.see(tk.END)
            self.status_label.config(text=message)

        self.root.after(0, _log)

    def show_success_info(self):
        """Ba≈üarƒ± bilgilerini g√∂ster"""
        def _show():
            info_text = f"""
üåê Frontend: http://localhost:{self.port_vars['frontend_port'].get()}
üîß Backend API: http://localhost:{self.port_vars['backend_port'].get()}
üìö API Docs: http://localhost:{self.port_vars['backend_port'].get()}/docs
üóÉÔ∏è pgAdmin: http://localhost:{self.port_vars['pgadmin_port'].get()}

üìß pgAdmin Email: {self.pgadmin_email_var.get()}
üîê pgAdmin ≈ûifre: {self.pgadmin_pass_var.get()}
üóÑÔ∏è PostgreSQL ≈ûifre: {self.postgres_pass_var.get()}
"""

            # Clear success frame and add info
            for widget in self.success_frame.winfo_children():
                widget.destroy()

            ttk.Label(self.success_frame, text=info_text, justify="left",
                     font=("Courier", 10)).pack(anchor="w")

        self.root.after(0, _show)

    def open_frontend(self):
        """Frontend'i tarayƒ±cƒ±da a√ß"""
        import webbrowser
        webbrowser.open(f"http://localhost:{self.port_vars['frontend_port'].get()}")

    def open_api_docs(self):
        """API docs'u tarayƒ±cƒ±da a√ß"""
        import webbrowser
        webbrowser.open(f"http://localhost:{self.port_vars['backend_port'].get()}/docs")

    def open_pgadmin(self):
        """pgAdmin'i tarayƒ±cƒ±da a√ß"""
        import webbrowser
        webbrowser.open(f"http://localhost:{self.port_vars['pgadmin_port'].get()}")

    def close_app(self):
        """Uygulamayƒ± kapat"""
        self.root.quit()


def main():
    root = tk.Tk()
    app = TradeBotInstaller(root)
    root.mainloop()


if __name__ == "__main__":
    main()
