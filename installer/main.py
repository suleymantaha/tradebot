#!/usr/bin/env python3
"""
TradeBot GUI Installer
======================
Grafik aray√ºzl√º kurulum programƒ±
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import subprocess
import os
import sys
import json
import shutil
import datetime
from pathlib import Path
import platform

class TradeBotInstaller:
    def __init__(self, root):
        self.root = root
        self.root.title("TradeBot Installer v2.0")
        self.root.geometry("800x600")
        self.root.resizable(False, False)

        # Alt s√ºre√ßler i√ßin g√ºvenli UTF-8 IO kodlamasƒ±nƒ± zorla
        if os.environ.get('PYTHONIOENCODING') != 'utf-8':
            os.environ['PYTHONIOENCODING'] = 'utf-8'

        # Installer state
        self.install_path = os.getcwd()
        self.config = {
            "postgres_password": "",
            "pgadmin_email": "admin@tradebot.local",
            "pgadmin_password": "",
            "frontend_port": "3000",
            "backend_port": "8000",
            "postgres_port": "5432",
            "pgadmin_port": "5050",
            "environment": "production"
        }

        # Error logging
        self.error_log = []
        self.setup_logging()

        # Create notebook for pages
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)

        # Create pages
        self.create_welcome_page()
        self.create_system_check_page()
        self.create_config_page()
        self.create_install_page()
        self.create_finish_page()

        # Navigation buttons frame
        self.nav_frame = ttk.Frame(root)
        self.nav_frame.pack(fill="x", padx=10, pady=5)

        self.prev_btn = ttk.Button(self.nav_frame, text="< Geri", command=self.prev_page, state="disabled")
        self.prev_btn.pack(side="left")

        self.next_btn = ttk.Button(self.nav_frame, text="ƒ∞leri >", command=self.next_page)
        self.next_btn.pack(side="right")

        self.current_page = 0
        self.update_navigation()

    def setup_logging(self):
        """Error logging sistemini kurar"""
        self.log_file = os.path.join(self.install_path, "installer.log")
        try:
            with open(self.log_file, "w", encoding="utf-8") as f:
                f.write(f"TradeBot Installer Log - {datetime.datetime.now()}\n")
                f.write("=" * 50 + "\n\n")
        except Exception as e:
            print(f"Log dosyasƒ± olu≈üturulamadƒ±: {e}")

    def log_error(self, message, exception=None):
        """Hata loglar"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[ERROR {timestamp}] {message}"

        if exception:
            log_entry += f"\nException: {str(exception)}"

        self.error_log.append(log_entry)

        # Log dosyasƒ±na yaz
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(log_entry + "\n\n")
        except Exception:
            pass

        # Console'a da yazdƒ±r
        print(log_entry)

    def log_warning(self, message):
        """Uyarƒ± loglar"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[WARNING {timestamp}] {message}"
        
        # Log dosyasƒ±na yaz
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(log_entry + "\n")
        except Exception:
            pass
        
        # Console'a da yazdƒ±r
        print(log_entry)

    def log_info(self, message):
        """Bilgi loglar"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[INFO {timestamp}] {message}"

        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(log_entry + "\n")
        except Exception:
            pass

        print(log_entry)

    def create_welcome_page(self):
        """Ho≈ü geldin sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Ho≈ü Geldiniz")

        # Logo ve ba≈ülƒ±k
        title_frame = ttk.Frame(page)
        title_frame.pack(pady=50)

        title_label = ttk.Label(title_frame, text="üöÄ TradeBot Installer",
                               font=("Arial", 24, "bold"))
        title_label.pack()

        subtitle_label = ttk.Label(title_frame, text="Profesyonel Kripto Trading Bot",
                                  font=("Arial", 14))
        subtitle_label.pack(pady=10)

        # A√ßƒ±klama
        desc_frame = ttk.Frame(page)
        desc_frame.pack(pady=20, padx=50, fill="x")

        description = """
TradeBot'a ho≈ü geldiniz! Bu kurulum sihirbazƒ± size yardƒ±mcƒ± olacak:

‚úÖ Sistem gereksinimlerini kontrol et
‚úÖ Konfig√ºrasyon ayarlarƒ±nƒ± belirle
‚úÖ Docker containerlarƒ± otomatik kur
‚úÖ G√ºvenli ≈üifreler olu≈ütur
‚úÖ T√ºm servisleri ba≈ülat

Kurulum yakla≈üƒ±k 5-10 dakika s√ºrer.
        """

        desc_label = ttk.Label(desc_frame, text=description, justify="left",
                              font=("Arial", 11))
        desc_label.pack()

        # Uyarƒ±
        warning_frame = ttk.Frame(page)
        warning_frame.pack(pady=20, padx=50, fill="x")

        warning_text = "‚ö†Ô∏è  Kurulum i√ßin Docker ve Docker Compose gereklidir"
        warning_label = ttk.Label(warning_frame, text=warning_text,
                                 foreground="orange", font=("Arial", 10, "bold"))
        warning_label.pack()

    def create_system_check_page(self):
        """Sistem kontrol sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Sistem Kontrol√º")

        title_label = ttk.Label(page, text="Sistem Gereksinimleri",
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Sistem kontrol frame
        self.check_frame = ttk.LabelFrame(page, text="Kontrol Sonu√ßlarƒ±", padding=20)
        self.check_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Kontrol butonu
        check_btn = ttk.Button(page, text="Sistem Kontrol√º Yap",
                              command=self.check_system)
        check_btn.pack(pady=10)

        self.system_checks = []

    def create_config_page(self):
        """Konfig√ºrasyon sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Konfig√ºrasyon")

        title_label = ttk.Label(page, text="Kurulum Ayarlarƒ±",
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Main config frame
        config_frame = ttk.Frame(page)
        config_frame.pack(fill="both", expand=True, padx=20)

        # Sol s√ºtun - Dizin ve ≈üifreler
        left_frame = ttk.LabelFrame(config_frame, text="Temel Ayarlar", padding=15)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # Kurulum dizini
        ttk.Label(left_frame, text="Kurulum Dizini:").pack(anchor="w")
        dir_frame = ttk.Frame(left_frame)
        dir_frame.pack(fill="x", pady=(0, 15))

        self.install_path_var = tk.StringVar(value=self.install_path)
        ttk.Entry(dir_frame, textvariable=self.install_path_var, state="readonly").pack(side="left", fill="x", expand=True)
        ttk.Button(dir_frame, text="G√∂zat", command=self.browse_directory).pack(side="right", padx=(5, 0))

        # PostgreSQL ≈üifresi
        ttk.Label(left_frame, text="PostgreSQL ≈ûifresi:").pack(anchor="w")
        self.postgres_pass_var = tk.StringVar()
        postgres_frame = ttk.Frame(left_frame)
        postgres_frame.pack(fill="x", pady=(0, 15))

        ttk.Entry(postgres_frame, textvariable=self.postgres_pass_var, show="*").pack(side="left", fill="x", expand=True)
        ttk.Button(postgres_frame, text="Olu≈ütur", command=self.generate_postgres_password).pack(side="right", padx=(5, 0))

        # pgAdmin ayarlarƒ±
        ttk.Label(left_frame, text="pgAdmin Email:").pack(anchor="w")
        self.pgadmin_email_var = tk.StringVar(value=self.config["pgadmin_email"])
        ttk.Entry(left_frame, textvariable=self.pgadmin_email_var).pack(fill="x", pady=(0, 10))

        ttk.Label(left_frame, text="pgAdmin ≈ûifresi:").pack(anchor="w")
        self.pgadmin_pass_var = tk.StringVar()
        pgadmin_frame = ttk.Frame(left_frame)
        pgadmin_frame.pack(fill="x", pady=(0, 15))

        ttk.Entry(pgadmin_frame, textvariable=self.pgadmin_pass_var, show="*").pack(side="left", fill="x", expand=True)
        ttk.Button(pgadmin_frame, text="Olu≈ütur", command=self.generate_pgadmin_password).pack(side="right", padx=(5, 0))

        # Saƒü s√ºtun - Port ayarlarƒ±
        right_frame = ttk.LabelFrame(config_frame, text="Port Ayarlarƒ±", padding=15)
        right_frame.pack(side="right", fill="both", expand=True, padx=(10, 0))

        ports = [
            ("Frontend Port:", "frontend_port"),
            ("Backend Port:", "backend_port"),
            ("PostgreSQL Port:", "postgres_port"),
            ("pgAdmin Port:", "pgadmin_port")
        ]

        self.port_vars = {}
        for label_text, key in ports:
            ttk.Label(right_frame, text=label_text).pack(anchor="w")
            var = tk.StringVar(value=self.config[key])
            self.port_vars[key] = var
            ttk.Entry(right_frame, textvariable=var, width=10).pack(anchor="w", pady=(0, 10))

        # Environment se√ßimi
        ttk.Label(right_frame, text="Ortam:").pack(anchor="w", pady=(20, 0))
        self.env_var = tk.StringVar(value="production")
        env_frame = ttk.Frame(right_frame)
        env_frame.pack(anchor="w")
        ttk.Radiobutton(env_frame, text="Production", variable=self.env_var, value="production").pack(anchor="w")
        ttk.Radiobutton(env_frame, text="Development", variable=self.env_var, value="development").pack(anchor="w")
        
        # Force mode se√ßimi
        ttk.Label(right_frame, text="Geli≈ümi≈ü:").pack(anchor="w", pady=(20, 0))
        self.force_recreate_var = tk.BooleanVar(value=False)
        force_frame = ttk.Frame(right_frame)
        force_frame.pack(anchor="w")
        ttk.Checkbutton(force_frame, text=".env dosyasƒ±nƒ± zorla yeniden olu≈ütur", 
                        variable=self.force_recreate_var).pack(anchor="w")
        
        # ≈ûifre senkronizasyonu kontrol butonu
        sync_frame = ttk.Frame(right_frame)
        sync_frame.pack(anchor="w", pady=(10, 0))
        ttk.Button(sync_frame, text="üîç ≈ûifre Senkronizasyonu Kontrol Et", 
                   command=self.check_password_sync_gui).pack(anchor="w")

    def create_install_page(self):
        """Kurulum sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Kurulum")

        title_label = ttk.Label(page, text="Kurulum ƒ∞lerliyor...",
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=20)

        # Progress bar
        self.progress = ttk.Progressbar(page, mode="indeterminate")
        self.progress.pack(fill="x", padx=50, pady=10)

        # Status label
        self.status_label = ttk.Label(page, text="Kurulum ba≈ülamadƒ±",
                                     font=("Arial", 11))
        self.status_label.pack(pady=10)

        # Log area
        log_frame = ttk.LabelFrame(page, text="Kurulum Detaylarƒ±", padding=10)
        log_frame.pack(fill="both", expand=True, padx=20, pady=20)

        self.log_text = tk.Text(log_frame, height=15, wrap="word")
        scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)

        self.log_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Install button
        self.install_btn = ttk.Button(page, text="Kurulumu Ba≈ülat",
                                     command=self.start_installation)
        self.install_btn.pack(pady=10)

    def create_finish_page(self):
        """Tamamlama sayfasƒ±"""
        page = ttk.Frame(self.notebook)
        self.notebook.add(page, text="Tamamlandƒ±")

        title_label = ttk.Label(page, text="üéâ Kurulum Tamamlandƒ±!",
                               font=("Arial", 18, "bold"), foreground="green")
        title_label.pack(pady=30)

        # Success info frame
        self.success_frame = ttk.LabelFrame(page, text="Eri≈üim Bilgileri", padding=20)
        self.success_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # Desktop shortcut info
        info_frame = ttk.LabelFrame(page, text="Masa√ºst√º Kƒ±sayolu", padding=10)
        info_frame.pack(fill="x", padx=20, pady=10)

        desktop_info = ttk.Label(info_frame,
                                text="‚úÖ Masa√ºst√ºn√ºzde 'TradeBot' ikonu olu≈üturuldu\n"
                                     "üñ±Ô∏è  ƒ∞kona √ßift tƒ±klayarak projeyi ba≈ülatabilirsiniz\n"
                                     "üîß start_tradebot.sh/bat ve stop_tradebot.sh/bat scriptleri olu≈üturuldu",
                                justify="left", font=("Arial", 10))
        desktop_info.pack(anchor="w")

        # Buttons frame - Web eri≈üimleri
        web_button_frame = ttk.LabelFrame(page, text="Web Eri≈üimleri", padding=10)
        web_button_frame.pack(fill="x", padx=20, pady=10)

        web_buttons = ttk.Frame(web_button_frame)
        web_buttons.pack()

        ttk.Button(web_buttons, text="üåê Frontend A√ß",
                  command=self.open_frontend).pack(side="left", padx=5)
        ttk.Button(web_buttons, text="üìö API Docs A√ß",
                  command=self.open_api_docs).pack(side="left", padx=5)
        ttk.Button(web_buttons, text="üóÉÔ∏è pgAdmin A√ß",
                  command=self.open_pgadmin).pack(side="left", padx=5)

        # Utility buttons frame
        util_button_frame = ttk.LabelFrame(page, text="Ara√ßlar", padding=10)
        util_button_frame.pack(fill="x", padx=20, pady=10)

        util_buttons = ttk.Frame(util_button_frame)
        util_buttons.pack()

        ttk.Button(util_buttons, text="üìã Log Dosyasƒ± A√ß",
                  command=self.open_log_file).pack(side="left", padx=5)
        ttk.Button(util_buttons, text="üìÅ Kurulum Klas√∂r√º A√ß",
                  command=self.open_install_directory).pack(side="left", padx=5)
        ttk.Button(util_buttons, text="üñ•Ô∏è Masa√ºst√º ƒ∞konu Tekrar Olu≈ütur",
                  command=self.recreate_desktop_shortcut).pack(side="left", padx=5)
        ttk.Button(util_buttons, text="üåê Aƒü Temizliƒüi",
                  command=self.quick_fix_network_cleanup).pack(side="left", padx=5)

    def update_navigation(self):
        """Navigasyon butonlarƒ±nƒ± g√ºncelle"""
        self.prev_btn.config(state="normal" if self.current_page > 0 else "disabled")

        if self.current_page == len(self.notebook.tabs()) - 1:
            self.next_btn.config(text="Kapat", command=self.close_app)
        else:
            self.next_btn.config(text="ƒ∞leri >", command=self.next_page)

        self.notebook.select(self.current_page)

    def prev_page(self):
        """√ñnceki sayfa"""
        if self.current_page > 0:
            self.current_page -= 1
            self.update_navigation()

    def next_page(self):
        """Sonraki sayfa"""
        if self.current_page < len(self.notebook.tabs()) - 1:
            # Sayfa ge√ßi≈ü validasyonlarƒ±
            if self.current_page == 1:  # System check
                if not self.validate_system():
                    return
            elif self.current_page == 2:  # Config
                if not self.validate_config():
                    return

            self.current_page += 1
            self.update_navigation()

    def browse_directory(self):
        """Kurulum dizini se√ß"""
        directory = filedialog.askdirectory(initialdir=self.install_path)
        if directory:
            self.install_path = directory
            self.install_path_var.set(directory)

    def generate_postgres_password(self):
        """PostgreSQL ≈üifresi olu≈ütur"""
        import secrets
        import string

        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(16))
        self.postgres_pass_var.set(password)

    def generate_pgadmin_password(self):
        """pgAdmin ≈üifresi olu≈ütur"""
        import secrets
        import string

        alphabet = string.ascii_letters + string.digits
        password = ''.join(secrets.choice(alphabet) for _ in range(12))
        self.pgadmin_pass_var.set(password)

    def check_system(self):
        """Sistem gereksinimlerini kontrol et"""
        # Clear previous checks
        for widget in self.check_frame.winfo_children():
            if isinstance(widget, ttk.Label) and hasattr(widget, 'check_result'):
                widget.destroy()

        checks = [
            ("Docker", "docker --version"),
            ("Docker Compose", "docker-compose --version"),
            ("curl", "curl --version"),
            ("git", "git --version")
        ]

        for name, command in checks:
            try:
                result = subprocess.run(command.split(), capture_output=True, text=True, timeout=5)
                status = "‚úÖ Kurulu" if result.returncode == 0 else "‚ùå Eksik"
                color = "green" if result.returncode == 0 else "red"
            except Exception:
                status = "‚ùå Eksik"
                color = "red"

            label = ttk.Label(self.check_frame, text=f"{name}: {status}", foreground=color)
            setattr(label, "check_result", status)
            label.pack(anchor="w", pady=2)

    def validate_system(self):
        """Sistem kontrol√º validasyonu"""
        checks = [widget for widget in self.check_frame.winfo_children()
                 if hasattr(widget, 'check_result')]

        if not checks:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen √∂nce sistem kontrol√º yapƒ±n!")
            return False

        failed_checks = [widget for widget in checks if "‚ùå" in str(getattr(widget, "check_result", ""))]
        if failed_checks:
            messagebox.showerror("Hata", "Bazƒ± sistem gereksinimleri kar≈üƒ±lanmƒ±yor!")
            return False

        return True

    def validate_config(self):
        """Konfig√ºrasyon validasyonu"""
        if not self.postgres_pass_var.get():
            messagebox.showwarning("Uyarƒ±", "PostgreSQL ≈üifresi gerekli!")
            return False

        if not self.pgadmin_pass_var.get():
            messagebox.showwarning("Uyarƒ±", "pgAdmin ≈üifresi gerekli!")
            return False

        return True

    def start_installation(self):
        """Kurulumu ba≈ülat"""
        self.install_btn.config(state="disabled")
        self.progress.start()

        # Background thread'de kurulum yap
        thread = threading.Thread(target=self.run_installation)
        thread.daemon = True
        thread.start()

    def run_installation(self):
        """Kurulum i≈ülemini √ßalƒ±≈ütƒ±r - Tam otomatik"""
        try:
            self.log_info("TradeBot kurulumu ba≈ülatƒ±lƒ±yor...")
            self.log("üöÄ TradeBot kurulumu ba≈ülatƒ±lƒ±yor...")

            # Change to install directory
            os.chdir(self.install_path)

            # 1. System requirements check (already done in previous step)
            self.log_info("Sistem gereksinimleri kontrol edildi")
            self.log("‚úÖ Sistem gereksinimleri kontrol edildi")

            # 2. Create .env file
            self.log_info("Environment dosyasƒ± olu≈üturuluyor...")
            self.log("üìù Environment dosyasƒ± olu≈üturuluyor...")
            force_mode = self.force_recreate_var.get()
            if force_mode:
                self.log("üîÑ Force mode aktif - .env dosyasƒ± zorla yeniden olu≈üturuluyor...")
            self.create_env_file(force_recreate=force_mode)

            # 3. Setup directories
            self.log_info("Dizinler hazƒ±rlanƒ±yor...")
            self.log("üìÅ Dizinler hazƒ±rlanƒ±yor...")
            self.setup_directories()

            # 4. Setup nginx configuration
            self.log_info("Nginx konfig√ºrasyonu olu≈üturuluyor...")
            self.log("üåê Nginx konfig√ºrasyonu olu≈üturuluyor...")
            self.setup_nginx()

            # 5. Check and start Docker service
            self.log_info("Docker servisi kontrol ediliyor...")
            self.log("üê≥ Docker servisi kontrol ediliyor...")
            self.check_docker_service()

            # 6. Clean up existing containers
            self.log_info("Mevcut containerlar temizleniyor...")
            self.log("üßπ Mevcut containerlar temizleniyor...")
            self.cleanup_containers()

            # 7. Build and start services
            self.log_info("Docker images build ediliyor...")
            self.log("üèóÔ∏è Docker images build ediliyor... (Bu i≈ülem birka√ß dakika s√ºrebilir)")
            self.start_services()

            # 8. Wait for services to be ready
            self.log_info("Servisler ayaƒüa kalkmasƒ± bekleniyor...")
            self.log("‚è≥ Servisler ayaƒüa kalkmasƒ± bekleniyor...")
            self.wait_for_services()

            # 9. Create desktop shortcut and startup scripts
            self.log_info("Masa√ºst√º ikonu ve ba≈ülatma scriptleri olu≈üturuluyor...")
            self.log("üñ•Ô∏è Masa√ºst√º ikonu ve ba≈ülatma scriptleri olu≈üturuluyor...")
            self.create_desktop_shortcut()
            self.create_startup_scripts()

            self.log_info("Kurulum ba≈üarƒ±yla tamamlandƒ±!")
            self.log("üéâ Kurulum ba≈üarƒ±yla tamamlandƒ±!")
            self.show_success_info()

        except Exception as e:
            error_msg = f"Kurulum hatasƒ±: {str(e)}"
            self.log_error(error_msg, e)
            self.log(f"‚ùå Hata: {str(e)}")

            import traceback
            trace_msg = traceback.format_exc()
            self.log_error(f"Detaylƒ± hata: {trace_msg}")
            self.log(f"Detay: {trace_msg}")

            # Hata durumunda kullanƒ±cƒ±ya g√∂ster
            def _show_error():
                error_window = tk.Toplevel(self.root)
                error_window.title("Kurulum Hatasƒ±")
                error_window.geometry("700x500")

                ttk.Label(error_window, text="Kurulum sƒ±rasƒ±nda hata olu≈ütu:",
                         font=("Arial", 12, "bold")).pack(pady=10)

                # Error log text widget
                error_text = tk.Text(error_window, wrap=tk.WORD, height=15, width=80)
                error_text.pack(pady=10, padx=10, fill="both", expand=True)

                # Show last 10 errors
                for error in self.error_log[-10:]:
                    error_text.insert(tk.END, error + "\n\n")

                error_text.config(state="disabled")

                # Quick fixes frame
                fixes_frame = ttk.LabelFrame(error_window, text="Hƒ±zlƒ± √á√∂z√ºmler", padding=10)
                fixes_frame.pack(fill="x", padx=10, pady=5)

                # Quick fix buttons
                quick_fixes = ttk.Frame(fixes_frame)
                quick_fixes.pack()

                ttk.Button(quick_fixes, text="üßπ Docker Temizle",
                          command=self.quick_fix_docker_cleanup).pack(side="left", padx=3)
                ttk.Button(quick_fixes, text="üîÑ Docker Restart",
                          command=self.quick_fix_docker_restart).pack(side="left", padx=3)
                ttk.Button(quick_fixes, text="üåê Aƒü Temizliƒüi",
                          command=self.quick_fix_network_cleanup).pack(side="left", padx=3)
                ttk.Button(quick_fixes, text="üóëÔ∏è Images Temizle",
                          command=self.quick_fix_cleanup_images).pack(side="left", padx=3)
                ttk.Button(quick_fixes, text="üîç ≈ûifre Kontrol",
                          command=self.quick_fix_password_sync).pack(side="left", padx=3)

                # Button frame
                btn_frame = ttk.Frame(error_window)
                btn_frame.pack(pady=10)

                ttk.Button(btn_frame, text="üìã Log Dosyasƒ±nƒ± A√ß",
                          command=self.open_log_file).pack(side="left", padx=5)
                ttk.Button(btn_frame, text="üîÑ Tekrar Dene",
                          command=lambda: [error_window.destroy(), self.start_installation()]).pack(side="left", padx=5)
                ttk.Button(btn_frame, text="‚ùå Kapat",
                          command=error_window.destroy).pack(side="left", padx=5)

            self.root.after(0, _show_error)

        finally:
            self.progress.stop()
            self.install_btn.config(state="normal")

    def setup_directories(self):
        """Gerekli dizinleri olu≈ütur"""
        directories = ['logs', 'cache/data', 'scripts']
        for directory in directories:
            os.makedirs(directory, exist_ok=True)

    def setup_nginx(self):
        """Nginx konfig√ºrasyonu olu≈ütur"""
        nginx_config = """# TradeBot Nginx Configuration
# Auto-generated by GUI Installer

events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:80;
    }

    server {
        listen 80;
        server_name localhost;

        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Backend API
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health checks
        location /health {
            proxy_pass http://backend;
            proxy_set_header Host $host;
        }
    }
}
"""
        with open('nginx.conf', 'w') as f:
            f.write(nginx_config)

    def check_docker_service(self):
        """Docker servisini kontrol et ve ba≈ülat (platform'a g√∂re)"""
        try:
            # Docker info check
            result = subprocess.run(['docker', 'info'], capture_output=True, text=True, encoding='utf-8', errors='replace')
            if result.returncode == 0:
                self.log_info("Docker servisi zaten √ßalƒ±≈üƒ±yor")
                self.log("‚úÖ Docker servisi √ßalƒ±≈üƒ±yor")
                return

            self.log_info("Docker servisi √ßalƒ±≈ümƒ±yor, ba≈ülatƒ±lmaya √ßalƒ±≈üƒ±lƒ±yor...")
            self.log("‚ö†Ô∏è Docker servisi √ßalƒ±≈ümƒ±yor, ba≈ülatƒ±lƒ±yor...")

            sysname = platform.system()
            started = False

            if sysname == "Windows":
                desktop_exe_paths = [
                    r"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe",
                    r"C:\\Program Files (x86)\\Docker\\Docker\\Docker Desktop.exe",
                ]
                docker_desktop = next((p for p in desktop_exe_paths if os.path.exists(p)), None)
                if docker_desktop:
                    try:
                        subprocess.Popen([docker_desktop], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                        started = True
                    except Exception as e:
                        self.log_warning(f"Docker Desktop ba≈ülatƒ±lamadƒ±: {str(e)}")
                else:
                    # Fallback: try using shell to start app by name
                    try:
                        subprocess.Popen(["start", "", "Docker Desktop"], shell=True)
                        started = True
                    except Exception:
                        pass

            elif sysname == "Darwin":  # macOS
                try:
                    subprocess.run(['open', '-a', 'Docker'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                    started = True
                except Exception as e:
                    self.log_warning(f"macOS Docker ba≈ülatƒ±lamadƒ±: {str(e)}")

            else:  # Linux
                start_result = subprocess.run(['sudo', 'systemctl', 'start', 'docker'],
                                              capture_output=True, text=True, encoding='utf-8', errors='replace')
                started = (start_result.returncode == 0)
                if not started:
                    self.log_error(f"Docker servisi ba≈ülatƒ±lamadƒ±. Start result: {start_result.stderr}")

            if started:
                import time
                # Windows'ta Docker Desktop'ƒ±n ayaƒüa kalkmasƒ± i√ßin biraz daha bekle
                time.sleep(15 if sysname == "Windows" else 5)

            # Tekrar kontrol et
            check_result = subprocess.run(['docker', 'info'], capture_output=True, text=True, encoding='utf-8', errors='replace')
            if check_result.returncode == 0:
                self.log_info("Docker servisi ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")
                self.log("‚úÖ Docker servisi ba≈ülatƒ±ldƒ±")
            else:
                error_msg = f"Docker servisi ba≈ülatƒ±lamadƒ±. Check result: {check_result.stderr}"
                self.log_error(error_msg)
                raise Exception("Docker servisi ba≈ülatƒ±lamadƒ± - manuel olarak ba≈ülatƒ±n")
        except Exception as e:
            self.log_error(f"Docker servisi hatasƒ±: {str(e)}", e)
            self.log(f"‚ùå Docker servisi hatasƒ±: {str(e)}")
            raise

    def cleanup_containers(self):
        """Mevcut containerlarƒ± temizle"""
        try:
            # Compose dosya yolu (varsa kullan)
            compose_file = os.path.join(self.install_path, 'docker-compose.yml')
            if not os.path.exists(compose_file):
                alt_path = os.path.join(self.install_path, 'tradebot', 'docker-compose.yml')
                if os.path.exists(alt_path):
                    compose_file = alt_path

            # Stop and remove existing containers (Compose V2/V1)
            compose_cmd = None
            v2_check = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
            if v2_check.returncode == 0:
                compose_cmd = ['docker', 'compose']
            else:
                v1_check = subprocess.run(['docker-compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                if v1_check.returncode == 0:
                    compose_cmd = ['docker-compose']

            if compose_cmd and os.path.exists(compose_file):
                down_result = subprocess.run(compose_cmd + ['-f', compose_file, 'down', '--remove-orphans'],
                                             capture_output=True, text=True, encoding='utf-8', errors='replace')
                if down_result.returncode != 0:
                    self.log_error(f"Container stop hatasƒ±: {down_result.stderr}")
                    # Don't raise, continue anyway
            else:
                # Compose bulunamazsa yine de devam et
                self.log_warning("Docker Compose bulunamadƒ± veya compose dosyasƒ± yok; 'down' adƒ±mƒ± atlandƒ±")

            # Remove dangling images
            prune_result = subprocess.run(['docker', 'image', 'prune', '-f'],
                                          capture_output=True, text=True, encoding='utf-8', errors='replace')
            if prune_result.returncode != 0:
                self.log_error(f"Image cleanup hatasƒ±: {prune_result.stderr}")
                # Don't raise, continue anyway

            self.log_info("Containerlar temizlendi")
            self.log("‚úÖ Containerlar temizlendi")
        except Exception as e:
            self.log_error(f"Container temizleme hatasƒ±: {str(e)}", e)
            self.log(f"‚ö†Ô∏è Container temizleme uyarƒ±sƒ±: {str(e)}")

    def create_env_file(self, force_recreate=False):
        """Gerekli .env dosyasƒ±nƒ± olu≈ütur"""
        try:
            env_path = os.path.join(self.install_path, ".env")
            
            # .env dosyasƒ± zaten varsa kontrol et
            if os.path.exists(env_path) and not force_recreate:
                self.log_info(".env dosyasƒ± mevcut, ≈üifre senkronizasyonu kontrol ediliyor...")
                if self.check_password_sync():
                    self.log_info(".env dosyasƒ± senkronize, atlanƒ±yor")
                    return
                else:
                    self.log_warning(".env dosyasƒ± senkronize deƒüil, yeniden olu≈üturuluyor...")
                    # Backup olu≈ütur
                    backup_path = f"{env_path}.backup.{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    shutil.copy2(env_path, backup_path)
                    self.log_info(f"Eski .env dosyasƒ± yedeklendi: {backup_path}")
            
            self.log_info("G√ºvenli .env dosyasƒ± olu≈üturuluyor...")
            self.log("üîí G√ºvenli .env dosyasƒ± olu≈üturuluyor...")
            
            # G√ºvenli deƒüerler olu≈ütur
            import secrets
            import string
            
            def generate_secure_password(length=24):
                alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
                return ''.join(secrets.choice(alphabet) for _ in range(length))
            
            def generate_secret_key():
                return secrets.token_urlsafe(32)
            
            # FERNET_KEY olu≈ütur
            try:
                from cryptography.fernet import Fernet
                fernet_key = Fernet.generate_key().decode()
            except ImportError:
                # Fallback: g√ºvenli key
                fernet_key = secrets.token_urlsafe(32)
                self.log_warning("cryptography mod√ºl√º bulunamadƒ±, g√ºvenli fallback key kullanƒ±lƒ±yor")
            
            # G√ºvenli ≈üifreler olu≈ütur
            secure_postgres_password = generate_secure_password(24)
            secure_pgadmin_password = generate_secure_password(16)
            secure_secret_key = generate_secret_key()
            from urllib.parse import quote
            encoded_postgres_password = quote(secure_postgres_password, safe='')
            
            # .env i√ßeriƒüi
            env_content = f"""# ========================================
# TradeBot Environment Configuration
# ========================================
# Bu dosya installer tarafƒ±ndan otomatik olu≈üturuldu
# √ñNEMLƒ∞: Bu dosyayƒ± git'e commit etmeyin!

# ====================================
# DATABASE CONFIGURATION
# ====================================
POSTGRES_PASSWORD={secure_postgres_password}

# ====================================
# PGADMIN CONFIGURATION (Development)
# ====================================
PGADMIN_DEFAULT_EMAIL={self.config['pgadmin_email']}
PGADMIN_DEFAULT_PASSWORD={secure_pgadmin_password}

# ====================================
# SECURITY CONFIGURATION
# ====================================
SECRET_KEY={secure_secret_key}

# ====================================
# ENCRYPTION CONFIGURATION
# ====================================
FERNET_KEY={fernet_key}

# ====================================
# APPLICATION CONFIGURATION
# ====================================
ENVIRONMENT={self.config['environment']}
LOG_LEVEL=INFO
LIVE_TRADING_ENABLED=false
TESTNET_URL=true
TRADE_WEBHOOK_URL=

# Binance API anahtarƒ± doƒürulama ortamƒ±
VALIDATE_API_ON_TESTNET=0

# SMTP (opsiyonel)
SMTP_SERVER=
SMTP_PORT=587
SMTP_USERNAME=
SMTP_PASSWORD=
FROM_EMAIL=noreply@tradebot.com

# ====================================
# FRONTEND CONFIGURATION
# ====================================
FRONTEND_URL=http://localhost:{self.config['frontend_port']}
VITE_API_URL=http://localhost:{self.config['backend_port']}

# ====================================
# LOGGING
# ====================================
LOG_FILE=/app/logs/tradebot.log

# ====================================
# REDIS / CELERY CONFIGURATION
# ====================================
REDIS_URL=redis://redis:6379
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# ====================================
# DATABASE URL
# ====================================
DATABASE_URL=postgresql+asyncpg://tradebot_user:{encoded_postgres_password}@postgres:5432/tradebot_db
SYNC_DATABASE_URL=postgresql://tradebot_user:{encoded_postgres_password}@postgres:5432/tradebot_db
"""
            
            with open(env_path, "w", encoding="utf-8") as f:
                f.write(env_content)

            # Compose dizinine .env kopyasƒ± (bayraksƒ±z compose i√ßin)
            primary_compose = os.path.join(self.install_path, "docker-compose.yml")
            alt_compose = os.path.join(self.install_path, "tradebot", "docker-compose.yml")
            compose_dir = os.path.dirname(primary_compose) if os.path.exists(primary_compose) else (os.path.dirname(alt_compose) if os.path.exists(alt_compose) else None)
            if compose_dir:
                compose_env_path = os.path.join(compose_dir, ".env")
                with open(compose_env_path, "w", encoding="utf-8") as cf:
                    cf.write(env_content)
            
            # Dosya izinlerini g√ºvenli hale getir (Unix/Linux)
            if os.name != 'nt':  # Windows deƒüilse
                os.chmod(env_path, 0o600)  # Sadece owner okuyabilir
                if 'compose_env_path' in locals():
                    os.chmod(compose_env_path, 0o600)
            
            self.log_info(".env dosyasƒ± ba≈üarƒ±yla olu≈üturuldu")
            self.log("‚úÖ G√ºvenli .env dosyasƒ± olu≈üturuldu")
            self.log(f"üîê PostgreSQL ≈ûifresi: {secure_postgres_password[:8]}...")
            self.log(f"üîê pgAdmin ≈ûifresi: {secure_pgadmin_password[:8]}...")
            
        except Exception as e:
            self.log_error(f".env dosyasƒ± olu≈üturulamadƒ±: {str(e)}", e)
            self.log(f"‚ö†Ô∏è .env dosyasƒ± olu≈üturulamadƒ±: {str(e)}")
            # Don't raise, continue anyway

    def check_password_sync(self):
        """≈ûifre senkronizasyonu kontrol√º yap"""
        try:
            env_path = os.path.join(self.install_path, ".env")
            primary_compose = os.path.join(self.install_path, "docker-compose.yml")
            alt_compose = os.path.join(self.install_path, "tradebot", "docker-compose.yml")
            docker_compose_path = primary_compose if os.path.exists(primary_compose) else (alt_compose if os.path.exists(alt_compose) else None)
            
            # .env yoksa compose dizinindeki .env'yi dene
            if not os.path.exists(env_path) and docker_compose_path:
                compose_env_path = os.path.join(os.path.dirname(docker_compose_path), ".env")
                if os.path.exists(compose_env_path):
                    env_path = compose_env_path
            
            if not env_path or not docker_compose_path or not os.path.exists(env_path) or not os.path.exists(docker_compose_path):
                return False
            
            # .env dosyasƒ±ndan POSTGRES_PASSWORD'u oku
            env_password = None
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith('POSTGRES_PASSWORD='):
                        env_password = line.split('=', 1)[1].strip()
                        break
            
            if not env_password:
                self.log_warning(".env dosyasƒ±nda POSTGRES_PASSWORD bulunamadƒ±")
                return False
            
            # docker-compose.yml'den varsayƒ±lan ≈üifreyi oku
            with open(docker_compose_path, 'r', encoding='utf-8') as f:
                docker_content = f.read()
            
            # Docker-compose'da POSTGRES_PASSWORD kontrol√º
            if 'POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-' in docker_content:
                # Varsayƒ±lan ≈üifreyi √ßƒ±kar
                import re
                match = re.search(r'POSTGRES_PASSWORD:\s*\$\{POSTGRES_PASSWORD:-(.+?)\}', docker_content)
                if match:
                    default_password = match.group(1).strip()
                    if env_password == default_password:
                        self.log_warning("≈ûifre varsayƒ±lan deƒüerle aynƒ±, yeniden olu≈üturulmalƒ±")
                        return False
            
            # DATABASE_URL kontrol√º (URL-encoded parolayƒ± destekler)
            from urllib.parse import quote
            with open(env_path, 'r', encoding='utf-8') as f:
                env_content = f.read()
            encoded_env_password = quote(env_password, safe='')
            
            if f'tradebot_user:{encoded_env_password}@postgres:5432/tradebot_db' in env_content:
                self.log_info("≈ûifre senkronizasyonu ba≈üarƒ±lƒ±")
                return True
            else:
                self.log_warning("DATABASE_URL'de ≈üifre uyumsuzluƒüu")
                return False
                
        except Exception as e:
            self.log_error(f"≈ûifre senkronizasyonu kontrol√º hatasƒ±: {str(e)}", e)
            return False

    def check_password_sync_gui(self):
        """GUI i√ßin ≈üifre senkronizasyonu kontrol√º"""
        try:
            result = self.check_password_sync()
            if result:
                messagebox.showinfo("Senkronizasyon Kontrol√º", 
                                  "‚úÖ ≈ûifre senkronizasyonu ba≈üarƒ±lƒ±!\n"
                                  ".env dosyasƒ± ve docker-compose.yml uyumlu.")
            else:
                messagebox.showwarning("Senkronizasyon Kontrol√º", 
                                     "‚ö†Ô∏è ≈ûifre senkronizasyonu sorunu tespit edildi!\n"
                                     "√ñnerilen √ß√∂z√ºmler:\n"
                                     "‚Ä¢ 'Force mode' se√ßeneƒüini i≈üaretleyin\n"
                                     "‚Ä¢ Docker volumes'larƒ± temizleyin\n"
                                     "‚Ä¢ Manuel olarak .env dosyasƒ±nƒ± kontrol edin")
        except Exception as e:
            messagebox.showerror("Hata", f"≈ûifre senkronizasyonu kontrol√º ba≈üarƒ±sƒ±z:\n{str(e)}")

    def start_services(self):
        """Docker servislerini build et ve ba≈ülat"""
        try:
            # .env dosyasƒ± kontrol√º ve olu≈üturma
            force_mode = getattr(self, 'force_recreate_var', tk.BooleanVar(value=False)).get()
            self.create_env_file(force_recreate=force_mode)
            
            # Compose dosya yolu tespiti
            compose_file = os.path.join(self.install_path, 'docker-compose.yml')
            if not os.path.exists(compose_file):
                alt_path = os.path.join(self.install_path, 'tradebot', 'docker-compose.yml')
                if os.path.exists(alt_path):
                    compose_file = alt_path
                else:
                    error_msg = f"docker-compose.yml bulunamadƒ±: {compose_file}"
                    self.log_error(error_msg)
                    self.log(f"‚ùå {error_msg}")
                    raise Exception("Docker compose dosyasƒ± bulunamadƒ±")

            # Compose komut tespiti (V2 √∂ncelikli)
            compose_cmd = None
            v2_check = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
            if v2_check.returncode == 0:
                compose_cmd = ['docker', 'compose']
                self.log_info("Docker Compose V2 kullanƒ±lacak")
            else:
                v1_check = subprocess.run(['docker-compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                if v1_check.returncode == 0:
                    compose_cmd = ['docker-compose']
                    self.log_info("Docker Compose V1 kullanƒ±lacak")
                else:
                    error_msg = "Docker Compose bulunamadƒ±. L√ºtfen 'docker compose' (V2) veya 'docker-compose' (V1) kurun."
                    self.log_error(error_msg)
                    self.log(f"‚ùå {error_msg}")
                    raise Exception(error_msg)
            
            # Build images
            self.log_info(f"Docker images build ediliyor... (compose file: {compose_file})")
            self.log("üî® Docker images build ediliyor...")
            build_result = subprocess.run(compose_cmd + ['-f', compose_file, 'build', '--no-cache'],
                                          capture_output=True, text=True, encoding='utf-8', errors='replace')
            if build_result.returncode != 0:
                # Yaygƒ±n hatalarƒ± daha anla≈üƒ±lƒ±r hale getir
                stderr_lower = build_result.stderr.lower()
                stdout_lower = build_result.stdout.lower()

                if "no configuration file provided" in stderr_lower or "no configuration file provided" in stdout_lower:
                    error_msg = "Docker build hatasƒ±: docker-compose.yml bulunamadƒ± veya eri≈üilemedi."
                elif "--no-dev" in stderr_lower or "--no-dev" in stdout_lower:
                    error_msg = "Docker build hatasƒ±: Dockerfile'da ge√ßersiz '--no-dev' se√ßeneƒüi kullanƒ±lƒ±yor. Bu se√ßenek pip i√ßin deƒüil, poetry i√ßin ge√ßerlidir."
                elif "no space left" in stderr_lower:
                    error_msg = "Docker build hatasƒ±: Disk alanƒ± yetersiz. L√ºtfen disk alanƒ±nƒ±zƒ± kontrol edin."
                elif "permission denied" in stderr_lower:
                    error_msg = "Docker build hatasƒ±: ƒ∞zin hatasƒ±. Docker daemon'a eri≈üim izniniz var mƒ±?"
                elif "network" in stderr_lower and "timeout" in stderr_lower:
                    error_msg = "Docker build hatasƒ±: ƒ∞nternet baƒülantƒ±sƒ± sorunu. L√ºtfen baƒülantƒ±nƒ±zƒ± kontrol edin."
                else:
                    error_msg = "Docker build ba≈üarƒ±sƒ±z"

                self.log_error(f"{error_msg}. Stdout: {build_result.stdout}, Stderr: {build_result.stderr}")
                self.log(f"‚ùå {error_msg}")
                self.log("Detaylƒ± hata i√ßin log dosyasƒ±nƒ± inceleyin")
                raise Exception(error_msg)

            # Pre-start database (and redis) to ensure clean password sync
            self.log_info("√ñnce Postgres ve Redis ba≈ülatƒ±lƒ±yor...")
            self.log("üöÄ Postgres ve Redis ba≈ülatƒ±lƒ±yor...")
            pre_start = subprocess.run(compose_cmd + ['-f', compose_file, 'up', '-d', 'postgres', 'redis'],
                                       capture_output=True, text=True, encoding='utf-8', errors='replace')
            if pre_start.returncode != 0:
                self.log_warning(f"√ñn ba≈ülatma uyarƒ±sƒ±: {pre_start.stderr}")

            # Wait for Postgres to be ready
            import time, re
            for attempt in range(1, 11):
                ready = subprocess.run(['docker', 'exec', 'tradebot-postgres', 'pg_isready', '-U', 'tradebot_user', '-d', 'tradebot_db'],
                                       capture_output=True, text=True, encoding='utf-8', errors='replace')
                if ready.returncode == 0:
                    break
                time.sleep(3)

            # Reconcile DB user password if needed
            env_path = os.path.join(self.install_path, ".env")
            if not os.path.exists(env_path):
                compose_env_path = os.path.join(os.path.dirname(compose_file), ".env")
                if os.path.exists(compose_env_path):
                    env_path = compose_env_path

            env_password = None
            if env_path and os.path.exists(env_path):
                with open(env_path, "r", encoding="utf-8") as f:
                    for line in f:
                        if line.startswith("POSTGRES_PASSWORD="):
                            env_password = line.split("=", 1)[1].strip()
                            break

            default_password = None
            with open(compose_file, "r", encoding="utf-8") as f:
                docker_content = f.read()
            m = re.search(r'POSTGRES_PASSWORD:\s*\$\{POSTGRES_PASSWORD:-(.+?)\}', docker_content)
            if m:
                default_password = m.group(1).strip()

            # Try last .env backup as additional candidate
            backup_password = None
            try:
                import glob
                backups = sorted(glob.glob(os.path.join(self.install_path, ".env.backup.*")))
                if backups:
                    with open(backups[-1], "r", encoding="utf-8") as bf:
                        for line in bf:
                            if line.startswith("POSTGRES_PASSWORD="):
                                backup_password = line.split("=", 1)[1].strip()
                                break
            except Exception:
                pass

            def _psql_ok(pw: str) -> bool:
                if not pw:
                    return False
                test_cmd = ['docker', 'exec', 'tradebot-postgres', 'bash', '-lc',
                            f"PGPASSWORD='{pw}' psql -U tradebot_user -d tradebot_db -tAc 'SELECT 1'"]
                test_res = subprocess.run(test_cmd, capture_output=True, text=True, encoding='utf-8', errors='replace')
                return test_res.returncode == 0

            current_pw = None
            if env_password and _psql_ok(env_password):
                current_pw = env_password
            elif default_password and _psql_ok(default_password):
                current_pw = default_password
            elif backup_password and _psql_ok(backup_password):
                current_pw = backup_password

            if current_pw and env_password and current_pw != env_password:
                self.log_info("Postgres ≈üifresi .env ile farklƒ±, g√ºncelleniyor...")
                alter_cmd = ['docker', 'exec', 'tradebot-postgres', 'bash', '-lc',
                             f"PGPASSWORD='{current_pw}' psql -U tradebot_user -d tradebot_db -c \"ALTER USER tradebot_user WITH PASSWORD '{env_password}';\""]
                alter_res = subprocess.run(alter_cmd, capture_output=True, text=True, encoding='utf-8', errors='replace')
                if alter_res.returncode == 0:
                    self.log_info("Postgres ≈üifresi .env ile uyumlu hale getirildi.")
                else:
                    self.log_warning(f"Postgres ≈üifre g√ºncelleme uyarƒ±sƒ±: {alter_res.stderr}")

            # Start services
            self.log_info("Servisler ba≈ülatƒ±lƒ±yor...")
            self.log("üöÄ Servisler ba≈ülatƒ±lƒ±yor...")
            start_result = subprocess.run(compose_cmd + ['-f', compose_file, 'up', '-d'],
                                          capture_output=True, text=True, encoding='utf-8', errors='replace')
            if start_result.returncode != 0:
                stderr_lower = start_result.stderr.lower()

                if "no configuration file provided" in stderr_lower:
                    error_msg = "Servis ba≈ülatma hatasƒ±: docker-compose.yml bulunamadƒ± veya eri≈üilemedi."
                elif "port" in stderr_lower and "already" in stderr_lower:
                    error_msg = "Servis ba≈ülatma hatasƒ±: Port zaten kullanƒ±mda. L√ºtfen port ayarlarƒ±nƒ± kontrol edin."
                elif "network" in stderr_lower:
                    error_msg = "Servis ba≈ülatma hatasƒ±: Docker network sorunu."
                elif "password authentication failed" in stderr_lower:
                    error_msg = "Servis ba≈ülatma hatasƒ±: PostgreSQL ≈üifre authentication hatasƒ±. .env dosyasƒ±nƒ± kontrol edin."
                elif "fernet_key is required" in stderr_lower or "fernet" in stderr_lower:
                    error_msg = "Servis ba≈ülatma hatasƒ±: FERNET_KEY eksik. G√ºvenlik anahtarƒ± olu≈üturulamadƒ±."
                elif "dependency failed" in stderr_lower:
                    error_msg = "Servis ba≈ülatma hatasƒ±: Baƒüƒ±mlƒ±lƒ±k servisi ba≈ülatƒ±lamadƒ±. Loglarƒ± kontrol edin."
                else:
                    error_msg = "Servisler ba≈ülatƒ±lamadƒ±"

                self.log_error(f"{error_msg}. Stdout: {start_result.stdout}, Stderr: {start_result.stderr}")
                self.log(f"‚ùå {error_msg}")
                self.log("Detaylƒ± hata i√ßin log dosyasƒ±nƒ± inceleyin")
                raise Exception(error_msg)

            self.log_info("Servisler ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")
            self.log("‚úÖ Servisler ba≈ülatƒ±ldƒ±")
        except Exception as e:
            # Eƒüer exception bizim √∂zel mesajƒ±mƒ±zdan deƒüilse, genel hata mesajƒ± ver
            if not str(e).startswith("Docker build hatasƒ±") and not str(e).startswith("Servis ba≈ülatma hatasƒ±"):
                self.log_error(f"Servis ba≈ülatma genel hatasƒ±: {str(e)}", e)
                self.log(f"‚ùå Beklenmeyen hata: {str(e)}")
            raise

    def wait_for_services(self):
        """Servislerin hazƒ±r olmasƒ±nƒ± bekle"""
        import time
        import requests

        self.log_info("Backend servisi hazƒ±r olmasƒ± bekleniyor...")
        self.log("‚è≥ Backend servisi hazƒ±r olmasƒ± bekleniyor...")
        max_attempts = 60
        attempt = 1

        while attempt <= max_attempts:
            try:
                response = requests.get(f"http://localhost:{self.port_vars['backend_port'].get()}/health",
                                      timeout=5)
                if response.status_code == 200:
                    self.log_info("Backend servisi hazƒ±r!")
                    self.log("‚úÖ Backend servisi hazƒ±r!")
                    break
            except Exception as e:
                if attempt == 1:  # Sadece ilk hatayi log'la
                    self.log_error(f"Backend servis kontrol hatasƒ±: {str(e)}", e)

            self.log(f"‚è≥ Deneme {attempt}/{max_attempts}...")
            time.sleep(5)
            attempt += 1

        if attempt > max_attempts:
            self.log_error("Backend servisi belirtilen s√ºrede hazƒ±r olmadƒ±")
            self.log("‚ö†Ô∏è Backend servisi belirtilen s√ºrede hazƒ±r olmadƒ±")
            self.log("‚ÑπÔ∏è Loglarƒ± kontrol edin: docker-compose logs backend")

        # Check frontend
        self.log_info("Frontend servisi kontrol ediliyor...")
        self.log("‚è≥ Frontend servisi kontrol ediliyor...")
        time.sleep(5)
        try:
            response = requests.get(f"http://localhost:{self.port_vars['frontend_port'].get()}",
                                  timeout=5)
            if response.status_code == 200:
                self.log_info("Frontend servisi hazƒ±r!")
                self.log("‚úÖ Frontend servisi hazƒ±r!")
            else:
                self.log_error(f"Frontend servisi yanƒ±t vermiyor: HTTP {response.status_code}")
                self.log("‚ö†Ô∏è Frontend servisi hen√ºz hazƒ±r deƒüil, ancak devam edebilirsiniz")
        except Exception as e:
            self.log_error(f"Frontend servis kontrol hatasƒ±: {str(e)}", e)
            self.log("‚ö†Ô∏è Frontend servisi hen√ºz hazƒ±r deƒüil, ancak devam edebilirsiniz")

    def create_env_file_legacy(self):
        """Environment dosyasƒ± olu≈ütur (legacy)"""
        from urllib.parse import quote
        _pgpass = self.postgres_pass_var.get()
        _pgpass_enc = quote(_pgpass, safe='')
        env_content = f"""# TradeBot Environment Configuration
# Otomatik olu≈üturuldu - GUI Installer

POSTGRES_PASSWORD={_pgpass}
PGADMIN_DEFAULT_EMAIL={self.pgadmin_email_var.get()}
PGADMIN_DEFAULT_PASSWORD={self.pgadmin_pass_var.get()}

SECRET_KEY={self.generate_secret_key()}
FERNET_KEY={self.generate_fernet_key()}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

ENVIRONMENT={self.env_var.get()}
LOG_LEVEL=INFO

VITE_API_URL=http://localhost:{self.port_vars['backend_port'].get()}

LOG_FILE=/app/logs/tradebot.log
REDIS_URL=redis://redis:6379

DATABASE_URL=postgresql+asyncpg://tradebot_user:{_pgpass_enc}@postgres:5432/tradebot_db
SYNC_DATABASE_URL=postgresql://tradebot_user:{_pgpass_enc}@postgres:5432/tradebot_db
"""

        with open('.env', 'w') as f:
            f.write(env_content)
        # Compose dizinine .env kopyasƒ±
        primary_compose = os.path.join(self.install_path, "docker-compose.yml")
        alt_compose = os.path.join(self.install_path, "tradebot", "docker-compose.yml")
        compose_dir = os.path.dirname(primary_compose) if os.path.exists(primary_compose) else (os.path.dirname(alt_compose) if os.path.exists(alt_compose) else None)
        if compose_dir:
            with open(os.path.join(compose_dir, ".env"), "w", encoding="utf-8") as cf:
                cf.write(env_content)

    def generate_secret_key(self):
        """Secret key olu≈ütur"""
        import secrets
        return secrets.token_hex(32)

    def generate_fernet_key(self):
        """Fernet key olu≈ütur"""
        try:
            from cryptography.fernet import Fernet
            return Fernet.generate_key().decode()
        except ImportError:
            import base64
            import os
            return base64.urlsafe_b64encode(os.urandom(32)).decode()

    def log(self, message):
        """Log mesajƒ± ekle"""
        def _log():
            self.log_text.insert(tk.END, message + "\n")
            self.log_text.see(tk.END)
            self.status_label.config(text=message)

        self.root.after(0, _log)

    def show_success_info(self):
        """Ba≈üarƒ± bilgilerini g√∂ster"""
        def _show():
            info_text = f"""
üåê Frontend: http://localhost:{self.port_vars['frontend_port'].get()}
üîß Backend API: http://localhost:{self.port_vars['backend_port'].get()}
üìö API Docs: http://localhost:{self.port_vars['backend_port'].get()}/docs
üóÉÔ∏è pgAdmin: http://localhost:{self.port_vars['pgadmin_port'].get()}

üìß pgAdmin Email: {self.pgadmin_email_var.get()}
üîê pgAdmin ≈ûifre: {self.pgadmin_pass_var.get()}
üóÑÔ∏è PostgreSQL ≈ûifre: {self.postgres_pass_var.get()}
"""

            # Clear success frame and add info
            for widget in self.success_frame.winfo_children():
                widget.destroy()

            ttk.Label(self.success_frame, text=info_text, justify="left",
                     font=("Courier", 10)).pack(anchor="w")

        self.root.after(0, _show)

    def open_frontend(self):
        """Frontend'i tarayƒ±cƒ±da a√ß"""
        import webbrowser
        webbrowser.open(f"http://localhost:{self.port_vars['frontend_port'].get()}")

    def open_api_docs(self):
        """API docs'u tarayƒ±cƒ±da a√ß"""
        import webbrowser
        webbrowser.open(f"http://localhost:{self.port_vars['backend_port'].get()}/docs")

    def open_pgadmin(self):
        """pgAdmin'i tarayƒ±cƒ±da a√ß"""
        import webbrowser
        webbrowser.open(f"http://localhost:{self.port_vars['pgadmin_port'].get()}")

    def close_app(self):
        """Uygulamayƒ± kapat"""
        self.root.quit()

    def create_startup_scripts(self):
        """Proje ba≈ülatma scriptlerini olu≈ütur"""
        try:
            # Start script for TradeBot
            start_script_content = self.get_start_script_content()
            stop_script_content = self.get_stop_script_content()

            if platform.system() == "Windows":
                # Windows batch files
                with open("start_tradebot.bat", "w", encoding="utf-8") as f:
                    f.write(start_script_content)
                with open("stop_tradebot.bat", "w", encoding="utf-8") as f:
                    f.write(stop_script_content)

                # Make executable
                os.chmod("start_tradebot.bat", 0o755)
                os.chmod("stop_tradebot.bat", 0o755)

                # Hidden launcher with VBS (runs batch without console window)
                batch_path = os.path.join(self.install_path, "start_tradebot.bat").replace("\\", "\\\\")
                vbs_content = f'Set WshShell = CreateObject("WScript.Shell")\nWshShell.Run "cmd /c ""{batch_path}""", 0, False\n'
                with open("start_tradebot.vbs", "w", encoding="utf-8") as f:
                    f.write(vbs_content)

            else:
                # Linux/macOS shell scripts
                with open("start_tradebot.sh", "w", encoding="utf-8") as f:
                    f.write(start_script_content)
                with open("stop_tradebot.sh", "w", encoding="utf-8") as f:
                    f.write(stop_script_content)

                # Make executable
                os.chmod("start_tradebot.sh", 0o755)
                os.chmod("stop_tradebot.sh", 0o755)

            self.log_info("Ba≈ülatma scriptleri olu≈üturuldu")

        except Exception as e:
            self.log_error("Ba≈ülatma scriptleri olu≈üturulamadƒ±", e)

    def get_start_script_content(self):
        """Platform'a g√∂re start script i√ßeriƒüi d√∂nd√ºr√ºr"""
        if platform.system() == "Windows":
            return f"""@echo off
chcp 65001 >nul
echo TradeBot ba≈ülatƒ±lƒ±yor...
cd /d "{self.install_path}"

REM Docker kontrol√º
docker --version >nul 2>&1
if %errorlevel% neq 0 (
    echo HATA: Docker bulunamadƒ±! L√ºtfen Docker Desktop'ƒ± kurun ve ba≈ülatƒ±n.
    pause
    exit /b 1
)

REM Docker servisi kontrol√º
docker info >nul 2>&1
if %errorlevel% neq 0 (
    echo Docker servisi √ßalƒ±≈ümƒ±yor, ba≈ülatƒ±lƒ±yor...
    start "" "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe"
    timeout /t 30 /nobreak >nul
)

REM Servisleri ba≈ülat
echo Servisler ba≈ülatƒ±lƒ±yor...
docker compose up -d

if %errorlevel% equ 0 (
    echo.
    echo TradeBot ba≈üarƒ±yla ba≈ülatƒ±ldƒ±!
    echo.
    echo Eri≈üim Linkleri:
    echo    Frontend:    http://localhost:{self.config['frontend_port']}
    echo    Backend API: http://localhost:{self.config['backend_port']}
    echo    pgAdmin:     http://localhost:{self.config['pgadmin_port']}
    echo.
    echo Tarayƒ±cƒ± otomatik olarak a√ßƒ±lacak...
    timeout /t 5 /nobreak >nul
    start http://localhost:{self.config['frontend_port']}
) else (
    echo HATA: TradeBot ba≈ülatƒ±lamadƒ±!
    echo Detaylar i√ßin: docker compose logs
    pause
)
"""
        else:
            return f"""#!/bin/bash
echo "TradeBot ba≈ülatƒ±lƒ±yor..."
cd "{self.install_path}"

# Prefer Docker Compose V2, fallback to V1
if docker compose version >/dev/null 2>&1; then
    docker compose up -d
elif command -v docker-compose >/dev/null 2>&1; then
    docker-compose up -d
else
    echo "HATA: Docker Compose bulunamadƒ±. L√ºtfen docker-compose veya Docker Compose V2 kurun."
    exit 1
fi

echo ""
echo "TradeBot ba≈ülatƒ±ldƒ±!"
echo "Frontend: http://localhost:{self.config['frontend_port']}"
echo "Backend API: http://localhost:{self.config['backend_port']}"
echo "pgAdmin: http://localhost:{self.config['pgadmin_port']}"
echo ""
echo "Tarayƒ±cƒ±lar otomatik olarak a√ßƒ±lacak..."
sleep 3

# Open in default browser
if command -v xdg-open > /dev/null; then
    xdg-open "http://localhost:{self.config['frontend_port']}" &
elif command -v open > /dev/null; then
    open "http://localhost:{self.config['frontend_port']}" &
fi

echo "TradeBot hazƒ±r!"
"""

    def get_stop_script_content(self):
        """Platform'a g√∂re stop script i√ßeriƒüi d√∂nd√ºr√ºr"""
        if platform.system() == "Windows":
            return f"""@echo off
chcp 65001 >nul
echo TradeBot durduruluyor...
cd /d "{self.install_path}"

REM Servisleri durdur
docker compose down

if %errorlevel% equ 0 (
    echo TradeBot ba≈üarƒ±yla durduruldu!
) else (
    echo HATA: TradeBot durdurulamadƒ±!
    echo Detaylar i√ßin: docker compose logs
)

pause
"""
        else:
            return f"""#!/bin/bash
echo "TradeBot durduruluyor..."
cd "{self.install_path}"
docker-compose down
echo "TradeBot durduruldu!"
"""

    def create_desktop_shortcut(self):
        """Platform'a g√∂re masa√ºst√º ikonu olu≈ütur"""
        try:
            desktop_path = self.get_desktop_path()
            if not desktop_path or not os.path.exists(desktop_path):
                self.log_error("Masa√ºst√º klas√∂r√º bulunamadƒ±")
                return

            if platform.system() == "Windows":
                self.create_windows_shortcut(desktop_path)
            elif platform.system() == "Darwin":  # macOS
                self.create_macos_shortcut(desktop_path)
            else:  # Linux
                self.create_linux_shortcut(desktop_path)

            self.log_info("Masa√ºst√º ikonu olu≈üturuldu")

        except Exception as e:
            self.log_error("Masa√ºst√º ikonu olu≈üturulamadƒ±", e)

    def get_desktop_path(self):
        """Platform'a g√∂re masa√ºst√º yolunu d√∂nd√ºr√ºr"""
        if platform.system() == "Windows":
            return os.path.join(os.path.expanduser("~"), "Desktop")
        elif platform.system() == "Darwin":  # macOS
            return os.path.join(os.path.expanduser("~"), "Desktop")
        else:  # Linux
            # Try common desktop paths
            desktop_paths = [
                os.path.join(os.path.expanduser("~"), "Desktop"),
                os.path.join(os.path.expanduser("~"), "Masa√ºst√º"),  # Turkish
                os.path.join(os.path.expanduser("~"), "Bureau"),    # French
            ]
            for path in desktop_paths:
                if os.path.exists(path):
                    return path
            return None

    def create_windows_shortcut(self, desktop_path):
        """Windows i√ßin shortcut olu≈ütur"""
        try:
            import importlib
            win32com_client = importlib.import_module('win32com.client')  # type: ignore[reportMissingModuleSource]
            Dispatch = getattr(win32com_client, 'Dispatch')

            shortcut_path = os.path.join(desktop_path, "TradeBot.lnk")
            shell = Dispatch('WScript.Shell')
            shortcut = shell.CreateShortCut(shortcut_path)
            # Use VBS to run batch hidden if available
            vbs_path = os.path.join(self.install_path, "start_tradebot.vbs")
            target_path = vbs_path if os.path.exists(vbs_path) else os.path.join(self.install_path, "start_tradebot.bat")
            shortcut.Targetpath = target_path
            shortcut.WorkingDirectory = self.install_path
            
            # Icon path kontrol√º
            icon_path = os.path.join(self.install_path, "assets", "icon.ico")
            if os.path.exists(icon_path):
                shortcut.IconLocation = icon_path
            else:
                # Varsayƒ±lan Windows icon
                shortcut.IconLocation = "shell32.dll,0"
                
            shortcut.Description = "TradeBot - Kripto Trading Bot"
            shortcut.save()
            
            self.log_info(f"Windows shortcut olu≈üturuldu: {shortcut_path}")

        except ImportError as e:
            self.log_error("pywin32 mod√ºl√º bulunamadƒ±, batch file fallback kullanƒ±lƒ±yor", e)
            # Fallback: Create batch file
            shortcut_content = f"""@echo off
cd /d "{self.install_path}"
start start_tradebot.bat
"""
            shortcut_path = os.path.join(desktop_path, "TradeBot.bat")
            with open(shortcut_path, "w", encoding="utf-8") as f:
                f.write(shortcut_content)
            self.log_info(f"Fallback batch file olu≈üturuldu: {shortcut_path}")
            
        except Exception as e:
            self.log_error("Windows shortcut olu≈üturulamadƒ±", e)
            # Son √ßare: Basit batch file
            shortcut_content = f"""@echo off
cd /d "{self.install_path}"
start start_tradebot.bat
"""
            shortcut_path = os.path.join(desktop_path, "TradeBot.bat")
            try:
                with open(shortcut_path, "w", encoding="utf-8") as f:
                    f.write(shortcut_content)
                self.log_info(f"Basit batch file olu≈üturuldu: {shortcut_path}")
            except Exception as fallback_error:
                self.log_error("Batch file bile olu≈üturulamadƒ±", fallback_error)

    def create_linux_shortcut(self, desktop_path):
        """Linux i√ßin .desktop dosyasƒ± olu≈ütur"""
        shortcut_content = f"""[Desktop Entry]
Version=1.0
Type=Application
Name=TradeBot
Comment=Kripto Trading Bot
Exec={os.path.join(self.install_path, "start_tradebot.sh")}
Icon={os.path.join(self.install_path, "assets", "icon.png")}
Path={self.install_path}
Terminal=false
StartupNotify=false
Categories=Office;Finance;
"""
        shortcut_path = os.path.join(desktop_path, "TradeBot.desktop")
        with open(shortcut_path, "w", encoding="utf-8") as f:
            f.write(shortcut_content)

        # Make executable
        os.chmod(shortcut_path, 0o755)

    def create_macos_shortcut(self, desktop_path):
        """macOS i√ßin app bundle olu≈ütur"""
        app_path = os.path.join(desktop_path, "TradeBot.app")
        contents_path = os.path.join(app_path, "Contents")
        macos_path = os.path.join(contents_path, "MacOS")

        os.makedirs(macos_path, exist_ok=True)

        # Info.plist
        plist_content = f"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>TradeBot</string>
    <key>CFBundleIdentifier</key>
    <string>com.tradebot.app</string>
    <key>CFBundleName</key>
    <string>TradeBot</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>2.0</string>
</dict>
</plist>
"""
        with open(os.path.join(contents_path, "Info.plist"), "w") as f:
            f.write(plist_content)

        # Executable script
        exec_content = f"""#!/bin/bash
cd "{self.install_path}"
./start_tradebot.sh
"""
        exec_path = os.path.join(macos_path, "TradeBot")
        with open(exec_path, "w") as f:
            f.write(exec_content)
        os.chmod(exec_path, 0o755)

    def open_log_file(self):
        """Log dosyasƒ±nƒ± a√ß"""
        try:
            if platform.system() == "Windows":
                os.startfile(self.log_file)
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", self.log_file])
            else:  # Linux
                subprocess.run(["xdg-open", self.log_file])
        except Exception as e:
            self.log_error("Log dosyasƒ± a√ßƒ±lamadƒ±", e)

    def open_install_directory(self):
        """Kurulum klas√∂r√ºn√º a√ß"""
        try:
            if platform.system() == "Windows":
                os.startfile(self.install_path)
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", self.install_path])
            else:  # Linux
                subprocess.run(["xdg-open", self.install_path])
        except Exception as e:
            self.log_error("Kurulum klas√∂r√º a√ßƒ±lamadƒ±", e)
            messagebox.showerror("Hata", f"Kurulum klas√∂r√º a√ßƒ±lamadƒ±: {str(e)}")

    def recreate_desktop_shortcut(self):
        """Masa√ºst√º ikonunu tekrar olu≈ütur"""
        try:
            self.create_desktop_shortcut()
            messagebox.showinfo("Ba≈üarƒ±lƒ±", "Masa√ºst√º ikonu tekrar olu≈üturuldu!")
        except Exception as e:
            self.log_error("Masa√ºst√º ikonu olu≈üturulamadƒ±", e)
            messagebox.showerror("Hata", f"Masa√ºst√º ikonu olu≈üturulamadƒ±: {str(e)}")

    def quick_fix_docker_cleanup(self):
        """Docker temizleme i≈ülemi"""
        def _cleanup():
            try:
                self.log_info("Docker temizleme i≈ülemi ba≈ülatƒ±lƒ±yor...")
                self.log("üßπ Docker temizleme i≈ülemi ba≈ülatƒ±lƒ±yor...")

                # Docker temizleme komutu
                cleanup_result = subprocess.run(['docker', 'system', 'prune', '-a', '-f'],
                                                capture_output=True, text=True, encoding='utf-8', errors='replace')
                if cleanup_result.returncode != 0:
                    self.log_error(f"Docker temizleme hatasƒ±: {cleanup_result.stderr}")
                    self.log(f"‚ùå Docker temizleme hatasƒ±: {cleanup_result.stderr}")
                    return

                self.log_info("Docker temizleme i≈ülemi ba≈üarƒ±yla tamamlandƒ±!")
                self.log("‚úÖ Docker temizleme i≈ülemi ba≈üarƒ±yla tamamlandƒ±!")
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "Docker temizleme i≈ülemi tamamlandƒ±!")

            except Exception as e:
                self.log_error(f"Docker temizleme hatasƒ±: {str(e)}", e)
                self.log(f"‚ùå Docker temizleme hatasƒ±: {str(e)}")
                messagebox.showerror("Hata", f"Docker temizleme hatasƒ±: {str(e)}")

        thread = threading.Thread(target=_cleanup)
        thread.daemon = True
        thread.start()

    def quick_fix_docker_restart(self):
        """Docker servisini restart et"""
        def _restart():
            try:
                self.log_info("Docker servisi restart ediliyor...")
                self.log("üîÑ Docker servisi restart ediliyor...")

                sysname = platform.system()
                if sysname == "Windows":
                    # Docker Desktop'ƒ± kapat ve tekrar ba≈ülat
                    subprocess.run(['taskkill', '/IM', 'Docker Desktop.exe', '/F'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                    desktop_exe_paths = [
                        r"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe",
                        r"C:\\Program Files (x86)\\Docker\\Docker\\Docker Desktop.exe",
                    ]
                    docker_desktop = next((p for p in desktop_exe_paths if os.path.exists(p)), None)
                    if docker_desktop:
                        subprocess.Popen([docker_desktop], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    else:
                        self.log_warning("Docker Desktop bulunamadƒ±; manuel olarak ba≈ülatƒ±n")
                        return
                elif sysname == "Darwin":
                    # macOS: Docker uygulamasƒ±nƒ± kapat ve tekrar a√ß
                    subprocess.run(['osascript', '-e', 'quit app "Docker"'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                    subprocess.run(['open', '-a', 'Docker'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                else:
                    # Linux: systemd ile restart
                    restart_result = subprocess.run(['sudo', 'systemctl', 'restart', 'docker'],
                                                    capture_output=True, text=True, encoding='utf-8', errors='replace')
                    if restart_result.returncode != 0:
                        self.log_error(f"Docker restart hatasƒ±: {restart_result.stderr}")
                        self.log(f"‚ùå Docker restart hatasƒ±: {restart_result.stderr}")
                        return

                self.log_info("Docker servisi ba≈üarƒ±yla restart edildi!")
                self.log("‚úÖ Docker servisi ba≈üarƒ±yla restart edildi!")
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "Docker servisi restart edildi!")

            except Exception as e:
                self.log_error(f"Docker restart hatasƒ±: {str(e)}", e)
                self.log(f"‚ùå Docker restart hatasƒ±: {str(e)}")
                messagebox.showerror("Hata", f"Docker restart hatasƒ±: {str(e)}")

        thread = threading.Thread(target=_restart)
        thread.daemon = True
        thread.start()

    def quick_fix_network_cleanup(self):
        """Docker aƒü ve port temizliƒüi"""
        def _net_cleanup():
            try:
                self.log_info("Docker aƒü ve port temizliƒüi ba≈ülatƒ±lƒ±yor...")
                self.log("üåê Docker Aƒü Temizliƒüi ba≈ülƒ±yor...")

                # Compose dosya yolu tespiti
                compose_file = os.path.join(self.install_path, 'docker-compose.yml')
                if not os.path.exists(compose_file):
                    alt_path = os.path.join(self.install_path, 'tradebot', 'docker-compose.yml')
                    if os.path.exists(alt_path):
                        compose_file = alt_path

                # Compose komut tespiti (V2 √∂ncelikli)
                compose_cmd = None
                v2_check = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                if v2_check.returncode == 0:
                    compose_cmd = ['docker', 'compose']
                else:
                    v1_check = subprocess.run(['docker-compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                    if v1_check.returncode == 0:
                        compose_cmd = ['docker-compose']

                # Containerlarƒ± ve networkleri durdur
                if compose_cmd and os.path.exists(compose_file):
                    down_result = subprocess.run(compose_cmd + ['-f', compose_file, 'down', '--remove-orphans'],
                                                 capture_output=True, text=True, encoding='utf-8', errors='replace')
                    if down_result.returncode != 0:
                        self.log_warning(f"Aƒü kapatma uyarƒ±sƒ±: {down_result.stderr}")
                else:
                    self.log_warning("Compose bulunamadƒ± veya compose dosyasƒ± yok; 'down' adƒ±mƒ± atlandƒ±")

                # Kullanƒ±lmayan aƒülarƒ± temizle
                net_prune = subprocess.run(['docker', 'network', 'prune', '-f'],
                                           capture_output=True, text=True, encoding='utf-8', errors='replace')
                if net_prune.returncode != 0:
                    self.log_error(f"Network prune hatasƒ±: {net_prune.stderr}")
                    self.log(f"‚ùå Aƒü temizliƒüi hatasƒ±: {net_prune.stderr}")
                    return

                self.log_info("Aƒü temizliƒüi ba≈üarƒ±yla tamamlandƒ±!")
                self.log("‚úÖ Aƒü temizliƒüi tamamlandƒ±!")
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "Docker aƒü temizliƒüi tamamlandƒ±!")

            except Exception as e:
                self.log_error(f"Aƒü temizliƒüi hatasƒ±: {str(e)}", e)
                self.log(f"‚ùå Aƒü temizliƒüi hatasƒ±: {str(e)}")
                messagebox.showerror("Hata", f"Aƒü temizliƒüi hatasƒ±: {str(e)}")

        thread = threading.Thread(target=_net_cleanup)
        thread.daemon = True
        thread.start()

    def quick_fix_cleanup_images(self):
        """Docker images temizleme i≈ülemi"""
        def _cleanup_images():
            try:
                self.log_info("Docker images temizleme i≈ülemi ba≈ülatƒ±lƒ±yor...")
                self.log("üóëÔ∏è Docker images temizleme i≈ülemi ba≈ülatƒ±lƒ±yor...")

                # Compose dosya yolu tespiti
                compose_file = os.path.join(self.install_path, 'docker-compose.yml')
                if not os.path.exists(compose_file):
                    alt_path = os.path.join(self.install_path, 'tradebot', 'docker-compose.yml')
                    if os.path.exists(alt_path):
                        compose_file = alt_path
                
                # Compose komut tespiti (V2 √∂ncelikli)
                compose_cmd = None
                v2_check = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                if v2_check.returncode == 0:
                    compose_cmd = ['docker', 'compose']
                else:
                    v1_check = subprocess.run(['docker-compose', 'version'], capture_output=True, text=True, encoding='utf-8', errors='replace')
                    if v1_check.returncode == 0:
                        compose_cmd = ['docker-compose']

                # √ñnce containerlarƒ± durdur (Compose varsa)
                if compose_cmd and os.path.exists(compose_file):
                    down_result = subprocess.run(compute_cmd := compose_cmd + ['-f', compose_file, 'down', '--remove-orphans'],
                                                capture_output=True, text=True, encoding='utf-8', errors='replace')
                    if down_result.returncode != 0:
                        self.log_warning(f"Containerlarƒ± durdurma sƒ±rasƒ±nda uyarƒ±: {down_result.stderr}")
                else:
                    self.log_warning("Compose bulunamadƒ± veya compose dosyasƒ± yok; 'down' adƒ±mƒ± atlanƒ±yor")

                # Docker images temizleme komutu
                cleanup_result = subprocess.run(['docker', 'image', 'prune', '-a', '-f'],
                                                capture_output=True, text=True, encoding='utf-8', errors='replace')
                if cleanup_result.returncode != 0:
                    self.log_error(f"Docker images temizleme hatasƒ±: {cleanup_result.stderr}")
                    self.log(f"‚ùå Docker images temizleme hatasƒ±: {cleanup_result.stderr}")
                    return

                self.log_info("Docker images temizleme i≈ülemi ba≈üarƒ±yla tamamlandƒ±!")
                self.log("‚úÖ Docker images temizleme i≈ülemi ba≈üarƒ±yla tamamlandƒ±!")
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "Docker images temizleme i≈ülemi tamamlandƒ±!")

            except Exception as e:
                self.log_error(f"Docker images temizleme hatasƒ±: {str(e)}", e)
                self.log(f"‚ùå Docker images temizleme hatasƒ±: {str(e)}")
                messagebox.showerror("Hata", f"Docker images temizleme hatasƒ±: {str(e)}")

        thread = threading.Thread(target=_cleanup_images)
        thread.daemon = True
        thread.start()

    def quick_fix_password_sync(self):
        """Hƒ±zlƒ± ≈üifre senkronizasyonu kontrol√º"""
        def _password_sync():
            try:
                self.log_info("≈ûifre senkronizasyonu kontrol ediliyor...")
                self.log("üîç ≈ûifre senkronizasyonu kontrol ediliyor...")

                result = self.check_password_sync()
                if result:
                    self.log_info("‚úÖ ≈ûifre senkronizasyonu ba≈üarƒ±lƒ±!")
                    self.log("‚úÖ ≈ûifre senkronizasyonu ba≈üarƒ±lƒ±!")
                    messagebox.showinfo("Ba≈üarƒ±lƒ±", "≈ûifre senkronizasyonu ba≈üarƒ±lƒ±!")
                else:
                    self.log_warning("‚ö†Ô∏è ≈ûifre senkronizasyonu sorunu tespit edildi!")
                    self.log("‚ö†Ô∏è ≈ûifre senkronizasyonu sorunu tespit edildi!")
                    
                    # Otomatik d√ºzeltme √∂nerisi
                    response = messagebox.askyesno("D√ºzeltme √ñnerisi", 
                                                "≈ûifre senkronizasyonu sorunu tespit edildi.\n"
                                                "Otomatik olarak .env dosyasƒ±nƒ± yeniden olu≈üturmak ister misiniz?")
                    if response:
                        self.log_info("Otomatik d√ºzeltme ba≈ülatƒ±lƒ±yor...")
                        self.log("üîß Otomatik d√ºzeltme ba≈ülatƒ±lƒ±yor...")
                        self.create_env_file(force_recreate=True)
                        self.log_info("‚úÖ .env dosyasƒ± yeniden olu≈üturuldu!")
                        self.log("‚úÖ .env dosyasƒ± yeniden olu≈üturuldu!")
                        messagebox.showinfo("Ba≈üarƒ±lƒ±", ".env dosyasƒ± yeniden olu≈üturuldu!")
                    else:
                        messagebox.showinfo("Bilgi", "Manuel olarak 'Force mode' se√ßeneƒüini kullanabilirsiniz.")

            except Exception as e:
                self.log_error(f"≈ûifre senkronizasyonu kontrol√º hatasƒ±: {str(e)}", e)
                self.log(f"‚ùå ≈ûifre senkronizasyonu kontrol√º hatasƒ±: {str(e)}")
                messagebox.showerror("Hata", f"≈ûifre senkronizasyonu kontrol√º hatasƒ±: {str(e)}")

        thread = threading.Thread(target=_password_sync)
        thread.daemon = True
        thread.start()


def main():
    root = tk.Tk()
    app = TradeBotInstaller(root)
    root.mainloop()


if __name__ == "__main__":
    main()
